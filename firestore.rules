rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ================================================
    // ðŸ”· ZIZO_MEDIVERSE: Core Application Rules
    // ================================================

    // Users can only read/update their own profile. Admins can view all.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
      allow create: if request.auth != null; // Anyone can create a user doc (on signup)
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Rules for the 'patients' collection and its sub-collections
    match /patients/{patientId} {
      // A user can read/write their own patient document
      allow read, update: if request.auth.uid == patientId || isAdmin();
      allow create: if isAdmin() || isReceptionist(); // Admins or Receptionists can create patients
      allow delete: if isAdmin();

      // Rules for patient-specific appointments
      match /appointments/{appointmentId} {
        allow read, create: if request.auth.uid == patientId;
        allow list: if request.auth.uid == patientId;
        allow update, delete: if isDoctor() || isReceptionist() || request.auth.uid == patientId;
      }

      // Rules for patient-specific prescriptions
      match /prescriptions/{prescriptionId} {
        allow read: if request.auth.uid == patientId || isDoctor() || isPharmacist();
        allow list: if request.auth.uid == patientId || isDoctor() || isPharmacist();
        allow create, update: if isDoctor();
      }

       // Rules for patient timeline events
      match /patient_events/{eventId} {
        allow read: if request.auth.uid == patientId || isDoctor() || isAdmin();
        allow list: if request.auth.uid == patientId || isDoctor() || isAdmin();
        allow create: if request.auth.uid != null; // Allow any authenticated user to create an event
      }
    }

    // Rules for top-level collections
    match /doctors/{doctorId} {
      allow read: if request.auth.uid != null;
      allow list: if request.auth.uid != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /nurses/{nurseId} {
      allow read: if request.auth.uid != null;
      allow list: if request.auth.uid != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /pharmacists/{pharmacistId} {
      allow read: if request.auth.uid != null;
      allow list: if request.auth.uid != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /labScientists/{scientistId} {
      allow read: if request.auth.uid != null;
      allow list: if request.auth.uid != null;
      allow create, update, delete: if isAdmin();
    }

    match /radiologists/{radiologistId} {
        allow read: if request.auth.uid != null;
        allow list: if request.auth.uid != null;
        allow create, update, delete: if isAdmin();
    }
    
    match /receptionists/{receptionistId} {
        allow read: if request.auth.uid != null;
        allow list: if request.auth.uid != null;
        allow create, update, delete: if isAdmin();
    }
    
    match /medicalRecordsOfficers/{officerId} {
        allow read: if request.auth.uid != null;
        allow list: if request.auth.uid != null;
        allow create, update, delete: if isAdmin();
    }

    match /systemLogs/{logId} {
      allow read: if isAdmin();
      allow list: if isAdmin();
      allow write: if false; // Logs should only be written by backend services
    }

    // ================================================
    // ðŸ”· Helper Functions
    // ================================================

    function isPatient() {
      return request.auth.token.role == "patient";
    }

    function isDoctor() {
      return request.auth.token.role == "doctor";
    }

    function isAdmin() {
      return request.auth.token.role == "admin";
    }

    function isLabScientist() {
      return request.auth.token.role == "lab_scientist";
    }

    function isNurse() {
      return request.auth.token.role == "nurse";
    }

    function isPharmacist() {
      return request.auth.token.role == "pharmacist";
    }

    function isReceptionist() {
      return request.auth.token.role == "receptionist";
    }

    function isRadiologist() {
      return request.auth.token.role == "radiologist";
    }

    function isMedicalRecordsOfficer() {
      return request.auth.token.role == "medical_records_officer";
    }
  }
}
