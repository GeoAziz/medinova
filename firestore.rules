
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ================================================
    // ðŸ”· ZIZO_MEDIVERSE: Main Medical Platform Rules
    // ================================================
    match /zizo_mediverse/{docId} {
      allow read, write: if false; // restrict direct root-level access
    }

    match /users/{userId} {
      // Admins can list and read all users. Other users can only read/update their own document.
      allow list: if isAdmin();
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth != null;
      allow delete: if isAdmin();
    }
    
    // This is the primary change: Rules are now nested to match the database structure.
    match /patients/{patientId} {
      // Allow a user to read/write their own patient document.
      allow read, update: if request.auth.uid == patientId || isAdmin() || isDoctor() || isNurse();
      allow create: if isPatient() || isAdmin() || isReceptionist();

      match /appointments/{appointmentId} {
        // A user can read/create/update their own appointments. Doctors/receptionists can manage them.
        allow read, create, update: if request.auth.uid == patientId;
        allow read, create, update, delete: if isDoctor() || isReceptionist() || isAdmin();
      }

      match /prescriptions/{prescriptionId} {
        // A user can read their own prescriptions.
        allow read: if request.auth.uid == patientId || isPharmacist() || isDoctor();
        // Only doctors can create/update prescriptions for a patient.
        allow create, update: if isDoctor();
      }
      
      match /medical_history/{recordId} {
        allow read, write: if isDoctor() || isNurse() || isMedicalRecordsOfficer() || request.auth.uid == patientId;
      }
      
      match /scans/{scanId} {
        allow read, create, update: if isRadiologist() || isDoctor();
        allow read: if request.auth.uid == patientId;
      }
      
      match /lab_tests/{testId} {
          allow read, create, update: if isLabScientist() || isDoctor();
          allow read: if request.auth.uid == patientId;
      }

      match /patient_events/{eventId} {
        allow read: if request.auth.uid == patientId || isAdmin() || isDoctor() || isNurse();
        allow create: if request.auth != null; // Any authenticated user can create an event for a patient (e.g. doctor, patient, system)
      }
    }

    match /doctors/{doctorId} {
        allow read, update: if request.auth.uid == doctorId || isAdmin();
        allow create, delete: if isAdmin();
    }
    
    // Standalone collections that are NOT nested under a patient
    match /inventory/{itemId} {
      allow read, write: if isPharmacist() || isAdmin();
    }

    match /systemLogs/{logId} {
      // Admins can read and list all system logs.
      allow list, read: if isAdmin();
      allow write: if false; // Should be written by backend functions only
    }

    // ================================================
    // Helper Functions
    // ================================================
    function isPatient() {
      return request.auth.token.role == "patient";
    }

    function isDoctor() {
      return request.auth.token.role == "doctor";
    }

    function isAdmin() {
      return request.auth.token.role == "admin";
    }

    function isLabScientist() {
      return request.auth.token.role == "lab_scientist";
    }

    function isNurse() {
      return request.auth.token.role == "nurse";
    }

    function isPharmacist() {
      return request.auth.token.role == "pharmacist";
    }

    function isReceptionist() {
      return request.auth.token.role == "receptionist";
    }

    function isRadiologist() {
      return request.auth.token.role == "radiologist";
    }

    function isMedicalRecordsOfficer() {
      return request.auth.token.role == "medical_records_officer";
    }


    // ================================================
    // ðŸ”· BIOSCAN: Medical Diagnostics Device Rules
    // ================================================
    match /bioscan_data/{scanId} {
      allow create: if isDevice();
      allow read: if isDoctor() || isLabScientist() || isRadiologist();
    }

    match /bioscan_logs/{logId} {
      allow read: if isAdmin();
    }

    function isDevice() {
      return request.auth.token.role == "bioscan_device";
    }


    // ================================================
    // ðŸ”· MEDBILL: Billing & Payments Rules
    // ================================================
    match /bills/{billId} {
      allow create: if isReceptionist() || isAdmin();
      allow read: if isPatient() || isAdmin();
      allow update: if isAdmin();
    }

    match /payments/{paymentId} {
      allow create: if isPatient();
      allow read: if isAdmin() || isPatient();
    }


    // ================================================
    // ðŸ”· ZIZO_HOSPISYNC: Hospital Network Sync
    // ================================================
    match /hospital_branches/{branchId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    match /staffSync/{syncId} {
      allow read, write: if isAdmin();
    }


    // ================================================
    // ðŸ”· HEALTHVAULT: Secure Data Backup System
    // ================================================
    match /backups/{backupId} {
      allow create, read: if isAdmin();
    }

    match /auditLogs/{logId} {
      allow read: if isMedicalRecordsOfficer() || isAdmin();
    }


    // ================================================
    // ðŸ”· INSURASYNC: Insurance Verification Module
    // ================================================
    match /insuranceClaims/{claimId} {
      allow create, read: if isPatient() || isReceptionist();
      allow update: if isAdmin();
    }

    match /insurancePolicies/{policyId} {
      allow read: if isPatient() || isAdmin();
      allow write: if isAdmin();
    }
  }
}
